import sqlite3
import os
import pickle
import subprocess
import hashlib

# Hardcoded credentials (Vulnerability)
admin_password = "SuperSecret123"

# Insecure function usage (Vulnerability)
def run_command(user_input):
    os.system(user_input)  # Allows arbitrary command execution (RCE risk!)

# Connect to an SQLite database
conn = sqlite3.connect("users.db")
cursor = conn.cursor()

# Create a table if not exists
cursor.execute("CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, password TEXT)")
conn.commit()

def register_user(username, password):
    hashed_password = hashlib.md5(password.encode()).hexdigest()  # Weak encryption (Vulnerability)
    query = "INSERT INTO users (username, password) VALUES ('" + username + "', '" + hashed_password + "')"
    cursor.execute(query)  # SQL Injection (Vulnerability)
    conn.commit()

def login_user(username, password):
    hashed_password = hashlib.md5(password.encode()).hexdigest()  # Weak encryption (Vulnerability)
    query = f"SELECT * FROM users WHERE username = '{username}' AND password = '{hashed_password}'"
    cursor.execute(query)  # SQL Injection (Vulnerability)
    result = cursor.fetchone()
    if result:
        print("Login successful!")
    else:
        print("Invalid credentials.")

def insecure_file_read(filename):
    with open(filename, "rb") as f:
        data = pickle.load(f)  # Arbitrary code execution risk (Vulnerability)
        print("Loaded data:", data)

def insecure_eval(user_input):
    eval(user_input)  # Arbitrary code execution (Vulnerability)

def unsafe_write_file():
    with open("userdata.txt", "w") as f:  # Unsafe file write operation (Vulnerability)
        f.write("User data stored here!")

def execute_subprocess(cmd):
    subprocess.Popen(cmd, shell=True)  # Insecure subprocess call (Vulnerability)

try:
    username = input("Enter username: ")
    password = input("Enter password: ")

    register_user(username, password)
    login_user(username, password)

    command = input("Enter a shell command to run: ")
    run_command(command)  # Remote Code Execution (Vulnerability)

    eval_input = input("Enter Python code to execute: ")
    insecure_eval(eval_input)  # Arbitrary code execution

    execute_subprocess(input("Enter command for subprocess: "))  # Insecure subprocess

    unsafe_write_file()

except:
    print("An error occurred.")  # Generic Exception Handling (Vulnerability)

conn.close()
